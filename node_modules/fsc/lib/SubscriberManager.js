"use strict";
var SubscriberManager = (function () {
    function SubscriberManager() {
        this.nextSubscriberId = 0;
        this.subscribers = {};
    }
    SubscriberManager.prototype.registerSubscriber = function (subscriber, currentState, notifyOnRegister) {
        var subscriberId = this.nextSubscriberId++;
        this.subscribers[subscriberId] = subscriber;
        if (notifyOnRegister) {
            if (subscriber.mappings !== undefined)
                this.updateMappings(subscriber, currentState);
            if (subscriber.notify !== undefined)
                subscriber.notify(currentState);
        }
        return subscriberId;
    };
    SubscriberManager.prototype.unregisterSubscriber = function (subscriberId) {
        delete this.subscribers[subscriberId];
    };
    SubscriberManager.prototype.notifyAllSubscribers = function (state) {
        for (var key in this.subscribers) {
            if (this.subscribers[key].mappings !== undefined)
                this.updateMappings(this.subscribers[key], state);
            if (this.subscribers[key].notify !== undefined)
                this.subscribers[key].notify(state);
        }
    };
    SubscriberManager.prototype.updateMappings = function (subscriber, state) {
        for (var mapping in subscriber.mappings) {
            if (!state.hasOwnProperty(mapping)) {
                throw new Error("Subscriber wants mapping on '" + mapping + "' but there is no state key available with this name!");
            }
            subscriber[subscriber.mappings[mapping]] = state[mapping];
        }
    };
    Object.defineProperty(SubscriberManager.prototype, "subscribersCount", {
        get: function () {
            var subscribersCount = 0;
            for (var subscriber in this.subscribers) {
                subscribersCount++;
            }
            return subscribersCount;
        },
        enumerable: true,
        configurable: true
    });
    return SubscriberManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SubscriberManager;
