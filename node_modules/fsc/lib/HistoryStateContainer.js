"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var StateContainer_1 = require('./StateContainer');
var HistoryStateContainer = (function (_super) {
    __extends(HistoryStateContainer, _super);
    function HistoryStateContainer(initialState, maxHistory, debug) {
        if (initialState === void 0) { initialState = null; }
        if (maxHistory === void 0) { maxHistory = 5; }
        if (debug === void 0) { debug = false; }
        _super.call(this, initialState, debug);
        this.history = [];
        this.redoStates = [];
        this.maxHistory = maxHistory;
    }
    HistoryStateContainer.prototype.undo = function () {
        var oldState = this.history[this.history.length - 1];
        this.history.splice(-1, 1);
        this.redoStates.push(this.state.clone());
        if (this.debug) {
            console.dir({ 'action': 'undo', 'newState': oldState, 'historySize': this.historySize, 'redoSize': this.redoSize });
        }
        this.state = oldState;
        this.subscriberManager.notifyAllSubscribers(oldState);
    };
    HistoryStateContainer.prototype.redo = function () {
        if (this.redoStates.length == 0) {
            throw new Error("No state to redo found!");
        }
        var redoState = this.redoStates[this.redoStates.length - 1];
        this.redoStates.splice(-1, 1);
        this.updateState(redoState, true);
    };
    HistoryStateContainer.prototype.updateState = function (newState, keepRedos) {
        if (keepRedos === void 0) { keepRedos = false; }
        if (this.history.length + 1 > this.maxHistory) {
            this.history.splice(-1, 1);
        }
        this.history.push(this.state.clone());
        if (!keepRedos) {
            //on new state throw away all previous undone states
            this.redoStates = [];
        }
        this.state = newState;
        if (this.debug) {
            if (keepRedos)
                console.dir({ 'action': 'redo', 'newState': newState, 'historySize': this.historySize, 'redoSize': this.redoSize });
            else
                console.dir({ 'action': 'update', 'newState': newState, 'historySize': this.historySize, 'redoSize': this.redoSize });
        }
        this.subscriberManager.notifyAllSubscribers(this.currentStateCopy);
    };
    Object.defineProperty(HistoryStateContainer.prototype, "historySize", {
        get: function () {
            return this.history.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HistoryStateContainer.prototype, "redoSize", {
        get: function () {
            return this.redoStates.length;
        },
        enumerable: true,
        configurable: true
    });
    return HistoryStateContainer;
}(StateContainer_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HistoryStateContainer;
