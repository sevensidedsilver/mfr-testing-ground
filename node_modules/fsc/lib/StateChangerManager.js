"use strict";
var StateChangerManager = (function () {
    function StateChangerManager() {
        this.stateChangers = {};
    }
    StateChangerManager.prototype.registerStateChanger = function (stateChanger, currentState, onTriggerCB, onRequestCB) {
        if (this.stateChangers[stateChanger.getName()]) {
            throw new Error("StateChanger with name '" + stateChanger.getName() + "' already registered!");
        }
        this.stateChangers[stateChanger.getName()] = stateChanger;
        stateChanger.onTriggerChange(onTriggerCB);
        stateChanger.onRequestCurrentState(onRequestCB);
        for (var key in stateChanger.getInitialState()) {
            var namespacedKey = stateChanger.getName() + "." + key;
            //Got no Initial State on initialization
            if (!currentState[namespacedKey]) {
                currentState[namespacedKey] = stateChanger.getInitialState()[key];
            }
        }
        return currentState;
    };
    StateChangerManager.prototype.unregisterStateChanger = function (stateChanger) {
        if (!this.stateChangers[stateChanger.getName()]) {
            throw new Error("StateChanger with name '" + stateChanger.getName() + "' not registered!");
        }
        delete this.stateChangers[stateChanger.getName()];
    };
    StateChangerManager.prototype.checkStateKey = function (currentState, stateKey, stateChangerName) {
        if (!(stateChangerName + "." + stateKey in currentState)) {
            throw new Error("No state property '" + stateChangerName + "." + stateKey + "' registered!");
        }
    };
    Object.defineProperty(StateChangerManager.prototype, "registeredStateChangers", {
        get: function () {
            var stateChangerNames = [];
            for (var stateChanger in this.stateChangers) {
                stateChangerNames.push(stateChanger);
            }
            return stateChangerNames;
        },
        enumerable: true,
        configurable: true
    });
    return StateChangerManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = StateChangerManager;
