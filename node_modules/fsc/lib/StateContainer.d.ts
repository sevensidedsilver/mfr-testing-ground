import { StateChanger } from './StateChanger';
import { BaseSubscriber } from './Subscriber';
import State from './State';
import StateChangerManager from './StateChangerManager';
import SubscriberManager from './SubscriberManager';
export default class StateContainer {
    protected debug: boolean;
    protected stateChangerManager: StateChangerManager;
    protected subscriberManager: SubscriberManager;
    protected state: State;
    constructor(initialState?: {
        [key: string]: any;
    }, debug?: boolean);
    registerStateChanger(stateChanger: StateChanger): void;
    unregisterStateChanger(stateChanger: StateChanger): void;
    registerSubscriber(subscriber: BaseSubscriber, notifyOnSubscribe?: boolean): number;
    unregisterSubscriber(subscriberId: number): void;
    protected updateState(newState: State): void;
    private triggerChange(changes, stateChangerName);
    currentStateCopy: State;
    registeredStateChangers: Array<string>;
    subscribersCount: number;
}
