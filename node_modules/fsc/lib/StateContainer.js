"use strict";
var State_1 = require('./State');
var StateChangerManager_1 = require('./StateChangerManager');
var SubscriberManager_1 = require('./SubscriberManager');
var StateContainer = (function () {
    function StateContainer(initialState, debug) {
        if (initialState === void 0) { initialState = null; }
        if (debug === void 0) { debug = false; }
        this.debug = false;
        this.stateChangerManager = new StateChangerManager_1.default();
        this.subscriberManager = new SubscriberManager_1.default();
        this.state = new State_1.default();
        this.debug = debug;
        this.state = new State_1.default(initialState);
        if (this.debug) {
            console.dir({ 'action': 'initStateContainer', 'newState': this.state });
        }
    }
    StateContainer.prototype.registerStateChanger = function (stateChanger) {
        var _this = this;
        this.state = this.stateChangerManager.registerStateChanger(stateChanger, this.currentStateCopy, function (changes) { _this.triggerChange(changes, stateChanger.getName()); }, function () { return _this.currentStateCopy; });
        if (this.debug) {
            console.dir({ 'action': 'registeredStateChanger', 'newState': this.state });
        }
    };
    StateContainer.prototype.unregisterStateChanger = function (stateChanger) {
        this.stateChangerManager.unregisterStateChanger(stateChanger);
    };
    StateContainer.prototype.registerSubscriber = function (subscriber, notifyOnSubscribe) {
        if (notifyOnSubscribe === void 0) { notifyOnSubscribe = false; }
        return this.subscriberManager.registerSubscriber(subscriber, this.state, notifyOnSubscribe);
    };
    StateContainer.prototype.unregisterSubscriber = function (subscriberId) {
        this.subscriberManager.unregisterSubscriber(subscriberId);
    };
    StateContainer.prototype.updateState = function (newState) {
        this.state = newState;
        if (this.debug) {
            console.dir({ 'action': 'update', 'newState': newState });
        }
        this.subscriberManager.notifyAllSubscribers(this.currentStateCopy);
    };
    StateContainer.prototype.triggerChange = function (changes, stateChangerName) {
        var newState = this.state.clone();
        newState.changedKeys = [];
        newState.previousState = this.state.clone();
        for (var key in changes) {
            this.stateChangerManager.checkStateKey(newState, key, stateChangerName);
            newState[stateChangerName + "." + key] = changes[key];
            newState.changedKeys.push(stateChangerName + "." + key);
        }
        this.updateState(newState);
    };
    Object.defineProperty(StateContainer.prototype, "currentStateCopy", {
        get: function () {
            return this.state.clone();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateContainer.prototype, "registeredStateChangers", {
        get: function () {
            return this.stateChangerManager.registeredStateChangers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateContainer.prototype, "subscribersCount", {
        get: function () {
            return this.subscriberManager.subscribersCount;
        },
        enumerable: true,
        configurable: true
    });
    return StateContainer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = StateContainer;
